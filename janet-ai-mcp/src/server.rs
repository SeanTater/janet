use crate::ServerConfig;
use crate::tools::{self, RegexSearchRequest, SemanticSearchRequest};
use anyhow::Result;
use rmcp::{ServerHandler, ServiceExt, model::ServerInfo, tool};
use tokio::io::{stdin, stdout};
use tracing::info;

/// Janet MCP Server that provides search capabilities across codebases
#[derive(Clone)]
pub struct JanetMcpServer {
    #[allow(dead_code)]
    config: ServerConfig,
}

impl JanetMcpServer {
    /// Create a new Janet MCP server with the given configuration
    pub async fn new(config: ServerConfig) -> Result<Self> {
        info!(
            "Initializing Janet MCP server with root: {:?}",
            config.root_dir
        );

        Ok(Self { config })
    }

    /// Status tool - show index statistics and provider info
    #[tool(
        description = "Show index statistics including file count, chunk count, queue backlog, and provider implementations"
    )]
    async fn status(&self) -> String {
        info!("Processing status request");

        format!(
            "Janet AI MCP Server Status\n\
            Root Directory: {:?}\n\
            Semantic Search: enabled (stub implementation)\n\
            \n\
            Search Tools Available:\n\
            - regex_search: Pattern-based file content search\n\
            - semantic_search: Mock embedding-based similarity search\n\
            \n\
            Implementation Status:\n\
            - File System Search: ✓ Fully functional\n\
            - Database Integration: ⚠ Requires janet-ai-retriever setup\n\
            - Embedding Provider: ⚠ Requires janet-ai-embed completion\n\
            \n\
            Database Location: {:?}\n\
            Note: Run 'janet-ai-retriever index' to populate database for real semantic search.\n\
            ",
            self.config.root_dir,
            self.config.root_dir.join(".code-assistant/index.db")
        )
    }

    /// Regex search tool - search project files, dependencies, and docs
    #[tool(
        description = "Search files using regex patterns across project files, dependencies, and autogenerated docs"
    )]
    async fn regex_search(&self, request: RegexSearchRequest) -> Result<String, String> {
        tools::regex_search::regex_search(&self.config, request).await
    }

    /// Semantic search tool - search using embeddings
    #[tool(description = "Search files using semantic similarity with embeddings")]
    async fn semantic_search(&self, request: SemanticSearchRequest) -> Result<String, String> {
        tools::semantic_search::semantic_search(&self.config, request).await
    }

    /// Serve the MCP server using stdio transport
    pub async fn serve_stdio(&self) -> Result<()> {
        info!("Starting MCP server with stdio transport");

        let transport = (stdin(), stdout());
        let server = self.clone().serve(transport).await?;
        let quit_reason = server.waiting().await?;

        info!("MCP server quit: {:?}", quit_reason);
        Ok(())
    }
}

impl ServerHandler for JanetMcpServer {
    fn get_info(&self) -> ServerInfo {
        ServerInfo {
            instructions: Some("Janet AI MCP Server - provides regex and semantic search capabilities across codebases".into()),
            ..Default::default()
        }
    }
}
