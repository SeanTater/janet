name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      version: ${{ steps.get-version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version from tag
      id: get-version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release v${{ steps.get-version.outputs.version }}
        body: |
          # Release v${{ steps.get-version.outputs.version }}
          
          ## What's Changed
          
          This release includes the latest features and bug fixes.
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.
          
          ## Installation
          
          ### Using Cargo
          ```bash
          cargo install janet-ai-context --version ${{ steps.get-version.outputs.version }}
          cargo install janet-ai-retriever --version ${{ steps.get-version.outputs.version }}
          ```
          
          ### Download Binaries
          Download the appropriate binary for your platform from the assets below.
        draft: false
        prerelease: ${{ contains(steps.get-version.outputs.version, '-') }}

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name: linux-x86_64-musl
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install musl tools
      run: sudo apt-get update && sudo apt-get install -y musl-tools
      if: matrix.target == 'x86_64-unknown-linux-musl'
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build release binaries
      run: |
        cargo build --release --target ${{ matrix.target }} --bin janet-ai-context-cli
        cargo build --release --target ${{ matrix.target }} --bin janet-ai-retriever
    
    - name: Strip binaries (Linux and macOS)
      run: |
        strip target/${{ matrix.target }}/release/janet-ai-context-cli || true
        strip target/${{ matrix.target }}/release/janet-ai-retriever || true
      if: matrix.os != 'windows-latest'
    
    - name: Package binaries
      shell: bash
      run: |
        mkdir -p dist
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp target/${{ matrix.target }}/release/janet-ai-context-cli.exe dist/
          cp target/${{ matrix.target }}/release/janet-ai-retriever.exe dist/
          cd dist
          7z a janet-ai-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip *.exe
        else
          cp target/${{ matrix.target }}/release/janet-ai-context-cli dist/
          cp target/${{ matrix.target }}/release/janet-ai-retriever dist/
          cd dist
          tar -czf janet-ai-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz janet-ai-context-cli janet-ai-retriever
        fi
    
    - name: Upload Release Asset (Windows)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/janet-ai-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip
        asset_name: janet-ai-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip
        asset_content_type: application/zip
      if: matrix.os == 'windows-latest'
    
    - name: Upload Release Asset (Unix)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/janet-ai-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz
        asset_name: janet-ai-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz
        asset_content_type: application/gzip
      if: matrix.os != 'windows-latest'

  publish-crates:
    name: Publish to crates.io
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-publish-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Publish janet-ai-context to crates.io
      run: cargo publish -p janet-ai-context --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
    
    - name: Wait for janet-ai-context to be available
      run: sleep 30
    
    - name: Publish janet-ai-retriever to crates.io
      run: cargo publish -p janet-ai-retriever --token ${{ secrets.CARGO_REGISTRY_TOKEN }}